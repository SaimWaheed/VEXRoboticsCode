#pragma config(Sensor, dgtl1,  EncoderL,       sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  EncoderR,       sensorQuadEncoder)
#pragma config(Motor,  port2,           leftDirect,    tmotorVex393HighSpeed_MC29, openLoop, encoderPort, dgtl1)
#pragma config(Motor,  port3,           leftChain,     tmotorVex393HighSpeed_MC29, openLoop, reversed, encoderPort, dgtl1)
#pragma config(Motor,  port4,           rightDirect,   tmotorVex393HighSpeed_MC29, openLoop, encoderPort, dgtl3)
#pragma config(Motor,  port5,           rightChain,    tmotorVex393HighSpeed_MC29, openLoop, reversed, encoderPort, dgtl3)
#pragma config(Motor,  port6,           TM,            tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port7,           mgmLeft,       tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,           mgmRight,      tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port10,          Claw,          tmotorNone, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma competitionControl(Competition)
#pragma autonomousDuration(15)
#pragma userControlDuration(105)
#pragma platform(VEX2)
#include "VEX_competition_Includes.c"



void pre_auton()
{
	bStopTasksBetweenModes = true;
}



task autonomous()
{
	motor[rightChain] = motor[rightDirect] = 127;
	motor[leftChain] = motor[leftDirect] = 127;
		wait1Msec(1750)
	
	motor[TM] = 127;
		wait1Msec(750)
	motor[TM] = 0;
    
	motor[mgmLeft] = motor[mgmRight] = 127;
		wait1Msec(1000)
	motor[mgmLeft] = motor[mgmRight] = 0;
  
	motor[rightChain] = motor[rightDirect] = 0;
	motor[leftChain] = motor[leftDirect] = 0;

	motor[mgmLeft] = motor[mgmRight] = -63;
		wait1Msec(1000);
	motor[mgmLeft] = motor[mgmRight] = 0;
	
	motor[rightChain] = motor[rightDirect] = 127;
	motor[leftChain] = motor[leftDirect] = -127;
		wait1Msec(2000)
	motor[rightChain] = motor[rightDirect] = 0;
	motor[leftChain] = motor[leftDirect] = 0
	
	motor[rightChain] = motor[rightDirect] = 127;
	motor[leftChain] = motor[leftDirect] = 127;
		wait1Msec(4500)
	motor[rightChain] = motor[rightDirect] = 0;
	motor[leftChain] = motor[leftDirect] = 0;
}



task usercontrol()
{
	while(true)
	{
		if ( abs ( vexRT[Ch2] ) > 20) //Code to control drive train. Joystick left and right.
			motor[rightChain] = motor[rightDirect] = vexRT[Ch2];
		else
			motor[rightChain] = motor[rightDirect] = 0;
			
		if ( abs ( vexRT[Ch3] ) > 20)
			motor[leftChain] = motor[leftDirect] = vexRT[Ch3];
		else
			motor[leftChain] = motor[leftDirect] = 0;


		if( vexRT[Btn6U] == 1) //Code to control Mobile Goal Manipulator. Right side Rear buttons.
			motor[mgmLeft] = motor[mgmRight] = 127;
			
		if ( vexRT[Btn6D] == 1)
			motor[mgmLeft] = motor[mgmRight] = -63;
			
		if( vexRT[Btn6U] == 0 && vexRT[Btn6D] == 0 )
			motor[mgmLeft] = motor[mgmRight] = 0;


		if( vexRT[Btn5U] == 1) // Code to control chain bar. Left side rear buttons.
			motor[TM] = 127;
			
		if( vexRT[Btn5D] == 1)
			motor[TM] = -127;
			
		if( vexRT[Btn5U] == 0 && vexRT[Btn5D] == 0 )
			motor[TM] = 9;


		if( vexRT[Btn7U] == 1) // code to control claw. left side front buttons.
			motor[Claw] =  127;
			
		if( vexRT[Btn7D] == 1)
			motor[Claw] = -127;
			
		if( vexRT[Btn7U] == 0 && vexRT[Btn7D] == 0 )
			motor[Claw] = 0;
	}
}
