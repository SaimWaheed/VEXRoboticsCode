#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, dgtl1,  EncoderL,       sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  EncoderR,       sensorQuadEncoder)
#pragma config(Sensor, dgtl5,  EncoderT,       sensorQuadEncoder)
#pragma config(Sensor, I2C_2,  MGMEncoder,     sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Motor,  port2,           leftDirect,    tmotorVex393HighSpeed_MC29, openLoop, encoderPort, dgtl1)
#pragma config(Motor,  port3,           leftChain,     tmotorVex393HighSpeed_MC29, openLoop, reversed, encoderPort, dgtl1)
#pragma config(Motor,  port4,           rightDirect,   tmotorVex393HighSpeed_MC29, openLoop, encoderPort, dgtl3)
#pragma config(Motor,  port5,           rightChain,    tmotorVex393HighSpeed_MC29, openLoop, reversed, encoderPort, dgtl3)
#pragma config(Motor,  port6,           TM,            tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port7,           mgmLeft,       tmotorVex393_MC29, openLoop, encoderPort, I2C_2)
#pragma config(Motor,  port8,           mgmRight,      tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port10,          Claw,          tmotorVex393_HBridge, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma competitionControl(Competition)
#pragma autonomousDuration(15)
#pragma userControlDuration(105)
#pragma platform(VEX2)
#include "VEX_competition_Includes.c"



void pre_auton()
{
	bStopTasksBetweenModes = true;
}


task autonomous()
{
	motor[TM] = 127; // Lifting Tower Full Speed About Half Way Up
		wait1Msec(750); // For 0.75 Seconds
	motor[TM] = 10; // Keep Motor From Falling Down 
	
	motor[mgmLeft] = motor[mgmRight] = -127; // Lower MGM Full Speed To Pick Up Mobile Goal
		wait1Msec(1000); // For 1 Second
	
	motor[rightChain] = motor[rightDirect] = 127; // Go Forward Full Speed To Mobile Goal
	motor[leftChain] = motor[leftDirect] = 127; // Go Forward Full Speed To Mobile Goal
		wait1Msec(1750); // For 1.75 Seconds
	motor[rightChain] = motor[rightDirect] = 0; // Stop Right Chain
	motor[leftChain] = motor[leftDirect] = 0; // Stop Left Chain
	motor[mgmLeft] = motor[mgmRight] = 0; // Stop The MGM Where It Is (Stop It From Going Down)

	motor[mgmLeft] = motor[mgmRight] = 63; // Lift MGM Half Speed With Mobile Goal
		wait1Msec(530); // For 0.53 Seconds
	motor[mgmLeft] = motor[mgmRight] = 0; // Stop The MGM Where It Is (Stop It From Going Up)

	motor[rightChain] = motor[rightDirect] = 127; // Right Chain Go Forward (Left Turn)
	motor[leftChain] = motor[leftDirect] = -127; // Left Chain Go Backwards (Left Turn)
		wait1Msec(975); // For 1.025 Seconds
	motor[rightChain] = motor[rightDirect] = 0; // Stop Left Chain
	motor[leftChain] = motor[leftDirect] = 0; //  Stop Right Chain

	motor[rightChain] = motor[rightDirect] = 127; // Right Chain Go Forward Full Speed Back To Starting Point
	motor[leftChain] = motor[leftDirect] = 127; // Left Chain Go Forward Full Speed Back To Starting Point
		wait1Msec(2075); // For 2.075 Seconds
	motor[rightChain] = motor[rightDirect] = 0;
	motor[leftChain] = motor[leftDirect] = 0;
	
	motor[TM] = -127;
		wait1Msec(250);
	motor[TM] = 0;
		
	motor[Claw] = -127;
		wait1Msec(500); //Stop to drop cone
	motor[Claw] = 0;
		motor[TM] = 127;
		wait1Msec(250);
	motor[TM] = 0;
	

	motor[rightChain] = motor[rightDirect] = 0;
	motor[leftChain] = motor[leftDirect] = 0;

	motor[rightChain] = motor[rightDirect] = -127;
	motor[leftChain] = motor[leftDirect] = 127;
		wait1Msec(250); //Slight turn 1/4 of a sec
	motor[rightChain] = motor[rightDirect] = 127;
	motor[leftChain] = motor[leftDirect] = 127;
		wait1Msec(750); //Final forward

	motor[mgmLeft] = motor[mgmRight] = -127;
		wait1Msec(500); //Drop mgm
	motor[rightChain] = motor[rightDirect] = -127;
	motor[leftChain] = motor[leftDirect] = -127;
	motor[mgmLeft] = motor[mgmRight] = 63;
		wait1Msec(500); //Go backward and lift mgm, releasing mobile goal

					motor[rightChain] = motor[rightDirect] = 0;
	motor[leftChain] = motor[leftDirect] = 0;
		motor[mgmLeft] = motor[mgmRight] = 0; //Stop everything
}



task usercontrol()
{
	while(true)
	{
		if ((vexRT[Ch3]) || (vexRT[Ch4])) // arcade DT code
		{
			motor[leftDirect] = motor[leftChain] = vexRT[Ch3] + vexRT[Ch4];
			motor[rightDirect] = motor[rightChain] = vexRT[Ch3] - vexRT[Ch4];
		}

		if( vexRT[Btn6U] == 1) //Code to control Mobile Goal Manipulator. Right side Rear buttons.
			motor[mgmLeft] = motor[mgmRight] = 60;

		if ( vexRT[Btn6D] == 1)
			motor[mgmLeft] = motor[mgmRight] = -127;

		if( vexRT[Btn6U]==0 && vexRT[Btn6D] == 0 )
			motor[mgmLeft] = motor[mgmRight] = 0;

		if(nMotorEncoder[mgmLeft] > 100) // two values used for encoders. first val here is the threshold
		{
			if (nMotorEncoder[mgmLeft] < 115) // second value here is the lock point.
			{
				motor[mgmLeft] = motor[mgmRight] = 0;
			}
		}

		if( abs(vexRT[Ch2]) > 20) // Code to control chain bar. Left side rear buttons.
			motor[TM] = vexRT[Ch2];

		if(SensorValue[EncoderT] >= -122 && abs(vexRT[Ch2])< 20)
			motor[TM] = 10;

		if(SensorValue[EncoderT] < -122 && abs(vexRT[Ch2]) < 20)
			motor[TM] = -10;

		if( vexRT[Btn5U] == 1) // code to control claw. left side front buttons.
			motor[Claw] =  127;

		if( vexRT[Btn5D] == 1)
			motor[Claw] = -127;

		if( vexRT[Btn5D]==0 && vexRT[Btn5D] == 0 )
			motor[Claw] = 0;
	}
}
